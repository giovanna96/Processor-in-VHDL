library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

entity BC is 
	
	port(
		clk,bt1,bt2: in std_logic;
		entrada: in std_logic_vector(15 downto 0);
		pc_ld,pc_clr,pc_inc: out std_logic;--PC
		ir_ld: out std_logic;--IR
		ird: out std_logic;--IR
		d_rd,d_wr: out std_logic;--MEMEORIA
		d_addr:	out std_logic_vector(7 downto 0);--MEMORIA
		rf_data: out std_logic_vector(7 downto 0);--MUX
		mux_sel: out std_logic_vector(1 downto 0);--MUX
		W_addr,RP_addr,RQ_addr: out std_logic_vector(3 downto 0);--REGISTRADOR
		W_wr,RP_rd,RQ_rd: out std_logic;--REGISTRADOR
		ula_sel: out std_logic_vector(2 downto 0);--ULA
		Rp_zero: in std_logic; --SAIDA REGISTRADOR 
		state: out std_logic_vector(3 downto 0);
		sel_mux2: out std_logic_vector(1 downto 0);
		aux: out std_logic_vector(3 downto 0)
		
		
	);

end BC; 

architecture BCarch of BC is
	
	constant Inicio: std_logic_vector(3 downto 0):= "0000";
	constant Fetch:  std_logic_vector(3 downto 0):= "0001";
	constant Decode: std_logic_vector(3 downto 0):= "0010";
	constant Add:    std_logic_vector(3 downto 0):= "0011";
	constant Sub:    std_logic_vector(3 downto 0):= "0100";
	constant E:      std_logic_vector(3 downto 0):= "0101";
	constant Ou:     std_logic_vector(3 downto 0):= "0110";
	constant Inverso:std_logic_vector(3 downto 0):= "0111";
	constant Store:  std_logic_vector(3 downto 0):= "1000";
	constant Load:   std_logic_vector(3 downto 0):= "1001";
	constant Lc:     std_logic_vector(3 downto 0):= "1010";
	constant Jump1:  std_logic_vector(3 downto 0):= "1011";
	constant Jump2:  std_logic_vector(3 downto 0):= "1100";
	
	
	signal estado: std_logic_vector(3 downto 0) :=Inicio;
	
	begin 
	
	state <= estado;
	
	 process(clk,bt1,bt2)
		begin
		 if(clk'event and clk = '1') then
					case estado is 
						when Inicio =>
						
						  estado <=Fetch;
						  
						 
						 When Fetch =>
						 
						  estado <= Decode;
						  
						  
						 When Decode =>
						  if(bt1='0') then 
						   if(entrada(15 downto 12)="0011")then
								estado <= Add;
							elsif(entrada(15 downto 12)="0100")then
								estado <= Sub;
							elsif(entrada(15 downto 12)="0101")then
								estado <= E;
							elsif(entrada(15 downto 12)="0110")then
								estado <= Ou;
							elsif(entrada(15 downto 12)="0111")then
								estado <= Inverso;
							elsif(entrada(15 downto 12)="1000")then
								estado <= Store;
							elsif(entrada(15 downto 12)="1001")then
								estado <= Load;
							elsif(entrada(15 downto 12)="1010")then
								estado <= Lc;
							elsif(entrada(15 downto 12)="1011")then
								estado <= Jump1;
							elsif(entrada(15 downto 12)="1100")then
								estado <= Jump2;
							end if;
							end if;
							
						 When Add => 
							if(bt2='0') then
							 estado <= Fetch;
							end if;
						
						When Sub => 
							if(bt2='0') then
							 estado <= Fetch;
							end if;
							
					   When E => 
							if(bt2='0') then
							 estado <= Fetch;
							end if;
							
						When Ou => 
							if(bt2='0') then
							 estado <= Fetch;
							end if;
							
						When Inverso => 
							if(bt2='0') then
							 estado <= Fetch;
							end if;
							
						When Store => 
							if(bt2='0') then
							 estado <= Fetch;
							end if;
							
						When Load => 
							if(bt2='0') then
							 estado <= Fetch;
							end if;
							
						When Lc => 
							if(bt2='0') then
							 estado <= Fetch;
							end if;
							
						When Jump1 => 
							if(Rp_zero='1' and bt2='0') then
							 estado <= Jump2;
							elsif(Rp_zero='0' and bt2='0') then 
								estado <= Fetch;
							end if;
							
					   When Jump2 => 
							 estado <= Fetch;
							
						when others =>
					end case;	
				end if;	
			end process;
			
			
								
					
	    
	RP_addr <= entrada(7 downto 4) when estado = Add or estado = Sub or estado = E or estado = Ou or estado = Inverso
		else  entrada (11 downto 8) when estado = Jump1 or estado = Store else "0000";	
	RQ_addr <= entrada(3 downto 0) when estado = Add or estado = Sub or estado = E or estado = Ou or estado = Inverso  else "0000";
	RP_rd   <= '1' when estado = Add or estado = Sub or estado = E or estado = Ou or estado = Inverso or estado = Store or estado = Jump1 else '0';
	RQ_rd   <= '1' when estado = Add or estado = Sub or estado = E or estado = Ou or estado = Inverso else '0';
	W_addr  <= entrada(11 downto 8) when estado = Add or estado = Sub or estado = E or estado = Ou or estado = Inverso or estado=Load or estado=Lc else "0000";
	W_wr    <= '1' when estado = Add or estado = Sub or estado = E or estado = Ou or estado = Inverso or estado=Load or estado=Lc else '0';
	ula_sel <= "000" when estado = Add else "001" when estado = Sub else "010" when estado = E else "011" when estado = Ou else "100" when estado = Inverso; 
	mux_sel <= "01" when estado = Load else "00" when estado = Lc else
					"10" when estado =Add or estado = Sub or estado = E or estado = Ou or estado = Inverso;
	pc_ld   <= '1' when estado = Jump2 else '0';
	pc_clr  <= '0';-- when estado = Inicio else '0';
	pc_inc  <= '1' when estado = Fetch else '0';
	
	ir_ld   <= '1' when estado = Fetch else '0'; 
	ird     <= '1' when estado = Fetch else '0';
	
	d_rd    <= '1' when estado = Load else '0';
	d_wr    <= '1' when estado = Store else '0'; 
	d_addr  <= entrada(7 downto 0) when estado = Store or estado = Load else "00000000"; 
	rf_data <= entrada(7 downto 0);
	sel_mux2 <= "01" when estado=add or estado = Sub or estado=Load or estado=LC or estado = e  or estado = Ou or estado = Inverso else 
					"10" when estado = store or estado = jump1 else "00";
	



end BCarch;